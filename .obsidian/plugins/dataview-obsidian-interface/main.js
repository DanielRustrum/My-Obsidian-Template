/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  DVOModal: () => DVOModal,
  default: () => DVO
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var modal_map = /* @__PURE__ */ new Map();
var collections = /* @__PURE__ */ new Map();
var bin_folder;
var plugin_app;
async function initCollections(app) {
  bin_folder = await app.vault.createFolder(`./${app.vault.configDir}/bin`);
  plugin_app = app;
}
function saveCollections() {
  for (let [collection, data] of collections) {
    return plugin_app.vault.create(`${bin_folder}/${collection}.bucket`, data);
  }
}
async function getCollection(collection) {
  for (let child of bin_folder.children) {
    if (child.name === collection)
      return JSON.parse(
        await plugin_app.vault.read(child)
      );
  }
}
var DVOModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
    this.id = "";
  }
  onOpen() {
    let { contentEl } = this;
    contentEl.setText(modal_map.get(this.id));
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
  setID(id) {
    this.id = id;
    return this;
  }
};
var DVO = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    initCollections(this.app);
    let plugin = this;
    globalThis.DvO = {
      command: (name, callback) => {
        let id = name.toLowerCase().replace(" ", "-");
        plugin.addCommand({
          id,
          name,
          callback
        });
      },
      modal: {
        define: (id, content) => {
          modal_map.set(id, content);
        },
        open: (id) => {
          new DVOModal(this.app).setID(id).open();
        }
      },
      vault: {
        create: async (path, content) => {
          if (path[path.length - 1] === "/" || path[path.length - 1] === "\\")
            this.app.vault.createFolder(`./${path}`);
          else
            this.app.vault.create(
              `./${path}.md`,
              content === "" ? "" : content
            );
        },
        delete: async (path) => {
        }
      },
      storage: {
        set: (collection, data) => {
          if (Array.isArray(data))
            collections.set(collection, [
              ...collections.get(collection),
              ...data
            ]);
          else if (typeof data === "object")
            collections.set(collection, {
              ...collections.get(collection),
              ...data
            });
          else
            collections.set(collection, data);
        },
        get: (collection) => {
          let data = collections.get(collection);
          if (data === void 0) {
            data = getCollection(collection);
          }
          return data;
        },
        save: () => {
          saveCollections();
        }
      }
    };
    this.addSettingTab(new DVOSettingTab(this.app, this));
  }
  onunload() {
    saveCollections();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var DVOSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
  }
};
