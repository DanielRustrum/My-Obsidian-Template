/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DVO
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// template.ts
function signal(default_value = void 0) {
  let signal_obj = {
    render_type: "signal",
    subscribed: [],
    _value: default_value
  };
  Object.defineProperty(signal_obj, "value", {
    get() {
      return this._value;
    },
    set(new_value) {
      this._value = new_value;
      this.subscribed.forEach((callback) => callback(new_value));
    }
  });
  return signal_obj;
}
function bind(signal2, callback) {
  signal2.subscribed.push(callback);
}
function collapseTemplate(strings, values) {
  let current_string = "", new_result = [];
  for (let index = 0; index < values.length; index += 1) {
    current_string += strings[index];
    if (values[index].render_type === "signal" || Array.isArray(values[index]) && values[index][0].render_type === "signal" || values[index].render_type === "template" || Array.isArray(values[index]) && values[index][0].render_type === "template" || values[index].render_type === "child" || typeof values[index] === "function" || values[index] instanceof HTMLElement) {
      new_result.push(current_string);
      current_string = "";
      new_result.push(values[index]);
    } else {
      current_string += values[index];
    }
  }
  new_result.push(current_string + strings[strings.length - 1]);
  return new_result;
}
function buildVDOM(template2) {
  let root = {
    render_type: "template",
    children: []
  };
  let current_node = root;
  let stack = [], attribute = [], attributes = [], content = [];
  let last_char = "", element = "", partial_attribute = "", partial_content = "";
  let in_tag = false, in_close_tag = false, in_content = false, in_attributes = false, in_attribute_string = false;
  stack.push(root);
  for (let segment of template2) {
    if (typeof segment === "string") {
      for (let char of segment) {
        if (in_tag && ["=", " ", ">"].includes(char) && !in_attribute_string && in_attributes && !in_close_tag) {
          if (partial_attribute !== "")
            attribute.push(partial_attribute);
          partial_attribute = "";
        }
        if (in_tag && (char === " " || char === ">") && !in_attribute_string && in_attributes && !in_close_tag) {
          if (attribute.length !== 0)
            attributes.push(attribute);
          attribute = [];
        }
        if (in_tag && !in_attributes && !["/", " ", ">"].includes(char) && !in_close_tag)
          element += char;
        if (in_tag && in_attributes && (!in_attribute_string && !["/", " ", ">", "=", '"', "'", "\n"].includes(char) || in_attribute_string && !['"'].includes(char)) && !in_close_tag)
          partial_attribute += char;
        if (in_content && char !== "<")
          partial_content += char;
        if (char === "<") {
          in_content = false;
          if (partial_content !== "")
            content.push(partial_content);
          if (content.length !== 0 && current_node)
            current_node.children.push(content);
          content = [];
          partial_content = "";
        }
        if (char === ">") {
          if (in_tag) {
            let node = {
              render_type: "node",
              children: []
            };
            if (!in_close_tag) {
              node["element"] = element;
              node["attrs"] = attributes;
              current_node.children.push(node);
              if (last_char !== "/") {
                stack.push(current_node);
                current_node = node;
              }
            } else {
              current_node = stack.pop();
            }
            in_tag = false;
            in_close_tag = false;
            in_attributes = false;
            attributes = [];
            element = "";
          }
          in_content = true;
        }
        if (in_tag && char === " ")
          in_attributes = true;
        if (char === "<")
          in_tag = true;
        if (last_char === "<" && char === "/")
          in_close_tag = true;
        if (char === '"' && in_attributes)
          in_attribute_string = !in_attribute_string;
        last_char = char;
      }
    }
    if (segment.render_type === "signal") {
      if (in_content) {
        content.push(partial_content);
        content.push(segment);
        partial_content = "";
      }
      if (in_attributes) {
        attribute.push(segment);
      }
    }
    if (typeof segment === "function") {
      if (in_attributes && attribute.length === 1) {
        attribute.push(segment);
      }
    }
    if (segment.render_type === "template" || segment.render_type === "child") {
      current_node.children.push(segment);
    }
    if (Array.isArray(segment)) {
      if (segment[0].render_type === "signal") {
        if (in_content) {
          content.push(partial_content);
          content.push(segment);
          partial_content = "";
        }
        if (in_attributes) {
          attribute.push(segment);
        }
      }
      if (segment[0].render_type === "template") {
        current_node.children.push(...segment);
      }
    }
    if (segment instanceof HTMLElement) {
      current_node.children.push(segment);
    }
  }
  return root;
}
function buildFragment(VDOM) {
  if (VDOM instanceof HTMLElement) {
    return [VDOM, {}];
  }
  if (VDOM.render_type === "template") {
    let node_fragment = new DocumentFragment();
    for (let node of VDOM.children) {
      let [result_node, _] = buildFragment(node);
      node_fragment.append(result_node);
    }
    return [node_fragment, {}];
  }
  if (VDOM.render_type === "node") {
    let element = document.createElement(VDOM["element"]);
    for (let attr of VDOM.attrs) {
      if (attr[0].startsWith("[") && attr[0].endsWith("]"))
        element.addEventListener(
          attr[0].substr(
            1,
            attr[0].length - 2
          ),
          attr[1]
        );
      else if (attr.length === 1)
        element.setAttribute(attr[0], "");
      else if (attr[1].render_type === "signal") {
        element.setAttribute(attr[0], attr[1].value);
        bind(attr[1], (value) => {
          element.setAttribute(attr[0], value);
        });
      } else if (Array.isArray(attr[1]) && attr[1][0].render_type === "signal") {
        if (attr[1][1].constructor.name == "AsyncFunction")
          element.setAttribute(
            attr[0],
            attr[1][1]().then(() => {
            }).catch((error) => {
              throw error;
            })
          );
        else
          element.setAttribute(
            attr[0],
            attr[1][1]()
          );
        bind(attr[1][0], () => {
          if (attr[1][1].constructor.name == "AsyncFunction")
            element.setAttribute(
              attr[0],
              attr[1][1]().then(() => {
              }).catch((error) => {
                throw error;
              })
            );
          else
            element.setAttribute(
              attr[0],
              attr[1][1]()
            );
        });
      } else
        element.setAttribute(attr[0], attr[1]);
    }
    let index = 0;
    let signals = [];
    for (let node of VDOM.children) {
      let [result_node, data] = buildFragment(node);
      if ("signals" in data && data.signals.length > 0) {
        signals.push([index, data.signals, node]);
      }
      if (typeof result_node === "string")
        element.insertAdjacentHTML("beforeend", result_node);
      else
        element.append(result_node);
      index += 1;
    }
    if (signals.length > 0) {
      for (let signal_data of signals) {
        for (let signal2 of signal_data[1]) {
          bind(signal2, () => {
            let [result_node, _] = buildFragment(signal_data[2]);
            let old = element.childNodes[signal_data[0]];
            old.replaceWith(
              result_node
            );
          });
        }
      }
    }
    return [element, {}];
  }
  if (VDOM.render_type === "child") {
    return [VDOM.content, {}];
  }
  let content_string = "";
  let signals_content = [];
  for (let content of VDOM) {
    if (content.render_type === "signal") {
      content_string += content.value;
      signals_content.push(content);
    } else if (Array.isArray(content) && content[0].render_type === "signal") {
      if (content[1].constructor.name == "AsyncFunction")
        content_string += content[1]().then(() => {
        }).catch((error) => {
          throw error;
        });
      else
        content_string += content[1]();
      signals_content.push(content[0]);
    } else if (content instanceof HTMLElement) {
    } else {
      content_string += content;
    }
  }
  return [document.createTextNode(content_string), {
    signals: signals_content
  }];
}
function template(strings, ...values) {
  return buildVDOM(collapseTemplate(strings, values));
}
function render(template2) {
  return buildFragment(template2)[0];
}
function define_and_render(strings, ...values) {
  return buildFragment(buildVDOM(collapseTemplate(strings, values)))[0];
}
var api = {
  define: template,
  render,
  signal,
  quick: define_and_render
};

// command.ts
var plugin;
function addCommand(name, callback) {
  let id = name.toLowerCase().replace(" ", "-");
  plugin.addCommand({
    id,
    name,
    callback
  });
}
function executeCommand(name) {
  return false;
}
function initAPI(module2) {
  plugin = module2;
}
var api2 = {
  add: addCommand,
  execute: executeCommand
};

// vault.ts
var plugin2;
function navigateExplorerWithLocation(location, constraint = "file") {
  let files;
  switch (constraint) {
    case "all":
      files = plugin2.app.vault.getAllLoadedFiles();
    case "file":
      files = plugin2.app.vault.getFiles();
    case "markdown":
      files = plugin2.app.vault.getMarkdownFiles();
    default:
      files = [];
  }
  for (let file of files) {
    if (file.path === location) {
      return file;
    }
  }
  return null;
}
function createItem(location, type = "markdown") {
  if (navigateExplorerWithLocation(location, "all") !== null)
    return false;
  switch (type) {
    case "folder":
      break;
    case "file":
      break;
    default:
      break;
  }
  return true;
}
function fetchItem(location) {
  return navigateExplorerWithLocation(location, "all");
}
function deleteItem(location) {
  let item = navigateExplorerWithLocation(location);
  if (item === null)
    return false;
  plugin2.app.vault.delete(item);
  return true;
}
function initAPI2(module2) {
  plugin2 = module2;
}
var api3 = {
  create: createItem,
  fetch: fetchItem,
  delete: deleteItem
};

// modal.ts
var import_obsidian = require("obsidian");
var plugin3;
var modal_map = /* @__PURE__ */ new Map();
var DVOModal = class extends import_obsidian.Modal {
  constructor(app, id) {
    super(app);
    this.id = id;
  }
  onOpen() {
    let content = modal_map.get(this.id);
    if (content === void 0)
      return;
    let { contentEl } = this;
    contentEl.append(content);
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
  setID(id) {
    this.id = id;
    return this;
  }
};
function defineModal(id, content) {
  if (content instanceof DocumentFragment) {
    let temp_div = document.createElement("div");
    temp_div.append(content);
    content = temp_div;
  }
  modal_map.set(id, content);
}
function openModal(id) {
  if (plugin3 === null)
    return;
  new DVOModal(plugin3.app, id).setID(id).open();
}
function initAPI3(module2) {
  plugin3 = module2;
}
var api4 = {
  define: defineModal,
  open: openModal
};

// workspace.ts
var plugin4;
function display(file, tab) {
  return false;
}
function createLeaf() {
}
function initAPI4(module2) {
  plugin4 = module2;
}
var api5 = {
  trunk: {
    display
  },
  leaf: {
    create: createLeaf
  }
};

// main.ts
var DVO = class extends import_obsidian2.Plugin {
  async onload() {
    initAPI(this);
    initAPI3(this);
    initAPI2(this);
    initAPI4(this);
    globalThis.DvO = {
      command: api2,
      modal: api4,
      vault: api3,
      template: api,
      workspace: api5
    };
    globalThis.DvOAsync = (callback) => {
      (async () => {
        await callback();
      })();
    };
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,
